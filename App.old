import React, { useState, useEffect, useCallback } from "react";
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  StatusBar,
  SafeAreaView,
  ActivityIndicator,
  FlatList,
  Alert,
  TextInput,
  RefreshControl,
  ScrollView,
} from "react-native";
import { NavigationContainer } from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { Ionicons } from "@expo/vector-icons";
import AsyncStorage from "@react-native-async-storage/async-storage";

const Tab = createBottomTabNavigator();

// Main App component
export default function App() {
  return (
    <NavigationContainer>
      <StatusBar barStyle="dark-content" />
      <Tab.Navigator
        screenOptions={({ route }) => ({
          tabBarIcon: ({ focused, color, size }) => {
            let iconName;

            if (route.name === "Words") {
              iconName = focused ? "book" : "book-outline";
            } else if (route.name === "Dictionary") {
              iconName = focused ? "list" : "list-outline";
            } else if (route.name === "Settings") {
              iconName = focused ? "settings" : "settings-outline";
            }

            return <Ionicons name={iconName} size={size} color={color} />;
          },
          tabBarActiveTintColor: "#646cff",
          tabBarInactiveTintColor: "gray",
        })}
      >
        <Tab.Screen name="Words" component={WordsScreen} />
        <Tab.Screen name="Dictionary" component={DictionaryScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}

// Words Screen Component
function WordsScreen() {
  const [words, setWords] = useState([]);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [level, setLevel] = useState("a1");
  const levels = ["a1", "a2", "b1", "b2", "c1"];
  const [currentLevelIndex, setCurrentLevelIndex] = useState(0);

  // Load words from API
  const loadWords = async () => {
    setLoading(true);
    try {
      // Get processed words from storage
      const knownWords = JSON.parse(
        (await AsyncStorage.getItem("knownWords")) || "[]"
      );
      const toLearnWords = JSON.parse(
        (await AsyncStorage.getItem("toLearnWords")) || "[]"
      );
      const processingWords = JSON.parse(
        (await AsyncStorage.getItem("processingWords")) || "[]"
      );

      // All processed words
      const processedWords = [
        ...knownWords,
        ...toLearnWords,
        ...processingWords,
      ];

      // Fetch words from API
      const response = await fetch(
        `https://raw.githubusercontent.com/mehmetmerthan/polingo-words/main/word-list/tr/tr-${level}.json`
      );
      const data = await response.json();

      // Filter out already processed words
      const filteredWords = data.filter(
        (word) => !processedWords.some((pw) => pw.term === word.term)
      );

      setWords(filteredWords);
      setCurrentWordIndex(0);
    } catch (error) {
      console.error("Error loading words:", error);
    } finally {
      setLoading(false);
    }
  };

  // Change level
  const changeLevel = (direction) => {
    let newIndex = currentLevelIndex;

    if (direction === "next" && currentLevelIndex < levels.length - 1) {
      newIndex = currentLevelIndex + 1;
    } else if (direction === "prev" && currentLevelIndex > 0) {
      newIndex = currentLevelIndex - 1;
    }

    setCurrentLevelIndex(newIndex);
    setLevel(levels[newIndex]);
  };

  // Handle word actions
  const handleWordAction = async (action) => {
    if (words.length === 0 || currentWordIndex >= words.length) return;

    const currentWord = words[currentWordIndex];
    currentWord.level = level;

    try {
      if (action === "known") {
        // Add to known words
        const knownWords = JSON.parse(
          (await AsyncStorage.getItem("knownWords")) || "[]"
        );
        await AsyncStorage.setItem(
          "knownWords",
          JSON.stringify([...knownWords, currentWord])
        );
      } else if (action === "toLearn") {
        // Add to words to learn
        const toLearnWords = JSON.parse(
          (await AsyncStorage.getItem("toLearnWords")) || "[]"
        );
        await AsyncStorage.setItem(
          "toLearnWords",
          JSON.stringify([...toLearnWords, currentWord])
        );
      }

      // Move to next word
      if (currentWordIndex < words.length - 1) {
        setCurrentWordIndex(currentWordIndex + 1);
      } else {
        // If no more words, reload the list
        loadWords();
      }
    } catch (error) {
      console.error("Error saving word:", error);
    }
  };

  // Load words on mount and when level changes
  useEffect(() => {
    loadWords();
  }, [level]);

  // Render current word card
  const renderWordCard = () => {
    if (loading) {
      return <ActivityIndicator size="large" color="#646cff" />;
    }

    if (words.length === 0) {
      return (
        <Text style={styles.emptyText}>
          No more words to learn at this level!
        </Text>
      );
    }

    if (currentWordIndex >= words.length) {
      return (
        <Text style={styles.emptyText}>
          You've completed all words! Change level or check your dictionary.
        </Text>
      );
    }

    const currentWord = words[currentWordIndex];

    return (
      <View style={styles.card}>
        <Text style={styles.termText}>{currentWord.term}</Text>
        <Text style={styles.meaningText}>{currentWord.meaning}</Text>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.levelSelector}>
        <TouchableOpacity
          onPress={() => changeLevel("prev")}
          style={styles.arrowButton}
        >
          <Ionicons name="arrow-back" size={24} color="#646cff" />
        </TouchableOpacity>

        <Text style={styles.levelText}>Level: {level.toUpperCase()}</Text>

        <TouchableOpacity
          onPress={() => changeLevel("next")}
          style={styles.arrowButton}
        >
          <Ionicons name="arrow-forward" size={24} color="#646cff" />
        </TouchableOpacity>
      </View>

      <Text style={styles.counter}>
        {words.length > 0
          ? `${currentWordIndex + 1}/${words.length} words left`
          : "0/0 words left"}
      </Text>

      <View style={styles.cardContainer}>{renderWordCard()}</View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.actionButton, styles.tickButton]}
          onPress={() => handleWordAction("known")}
          disabled={words.length === 0 || currentWordIndex >= words.length}
        >
          <Ionicons name="checkmark" size={32} color="white" />
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.actionButton, styles.crossButton]}
          onPress={() => handleWordAction("toLearn")}
          disabled={words.length === 0 || currentWordIndex >= words.length}
        >
          <Ionicons name="close" size={32} color="white" />
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

// Dictionary Screen Component
function DictionaryScreen() {
  const [toLearnWords, setToLearnWords] = useState([]);
  const [processingWords, setProcessingWords] = useState([]);
  const [activeTab, setActiveTab] = useState("toLearn"); // 'toLearn' or 'processing'
  const [loading, setLoading] = useState(true);
  const [searchText, setSearchText] = useState("");
  const [selectedLevelFilter, setSelectedLevelFilter] = useState("");
  const [refreshing, setRefreshing] = useState(false);
  const levels = ["a1", "a2", "b1", "b2", "c1"];

  // Load dictionary words
  const loadDictionary = async () => {
    setLoading(true);
    try {
      const toLearn = JSON.parse(
        (await AsyncStorage.getItem("toLearnWords")) || "[]"
      );
      const processing = JSON.parse(
        (await AsyncStorage.getItem("processingWords")) || "[]"
      );

      setToLearnWords(toLearn);
      setProcessingWords(processing);
    } catch (error) {
      console.error("Error loading dictionary:", error);
    } finally {
      setLoading(false);
    }
  };

  // Move word from toLearn to processing
  const moveToProcessing = async (word) => {
    try {
      // Remove from toLearn
      const updatedToLearn = toLearnWords.filter((w) => w.term !== word.term);
      await AsyncStorage.setItem(
        "toLearnWords",
        JSON.stringify(updatedToLearn)
      );

      // Add to processing
      const updatedProcessing = [...processingWords, word];
      await AsyncStorage.setItem(
        "processingWords",
        JSON.stringify(updatedProcessing)
      );

      // Update state
      setToLearnWords(updatedToLearn);
      setProcessingWords(updatedProcessing);
    } catch (error) {
      console.error("Error moving word to processing:", error);
    }
  };

  // Delete word from processing
  const deleteFromProcessing = async (word) => {
    try {
      Alert.alert(
        "Delete Word",
        `Are you sure you want to delete "${word.term}" permanently?`,
        [
          {
            text: "Cancel",
            style: "cancel",
          },
          {
            text: "Delete",
            onPress: async () => {
              // Remove from processing
              const updatedProcessing = processingWords.filter(
                (w) => w.term !== word.term
              );
              await AsyncStorage.setItem(
                "processingWords",
                JSON.stringify(updatedProcessing)
              );

              // Update state
              setProcessingWords(updatedProcessing);
            },
            style: "destructive",
          },
        ]
      );
    } catch (error) {
      console.error("Error deleting word:", error);
    }
  };

  // Filter words based on search and level filter
  const filterWords = (words) => {
    let filtered = [...words];

    // Apply search filter
    if (searchText) {
      filtered = filtered.filter(
        (word) =>
          word.term.toLowerCase().includes(searchText.toLowerCase()) ||
          word.meaning.toLowerCase().includes(searchText.toLowerCase())
      );
    }

    // Apply level filter
    if (selectedLevelFilter) {
      filtered = filtered.filter((word) => word.level === selectedLevelFilter);
    }

    return filtered;
  };

  // Handle refresh
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await loadDictionary();
    setRefreshing(false);
  }, []);

  // Load dictionary on mount
  useEffect(() => {
    loadDictionary();
  }, []);

  // Render dictionary item
  const renderItem = ({ item }) => (
    <View style={styles.dictionaryItem}>
      {activeTab === "toLearn" ? (
        <TouchableOpacity
          style={styles.checkbox}
          onPress={() => moveToProcessing(item)}
        >
          <Ionicons name="square-outline" size={24} color="#646cff" />
        </TouchableOpacity>
      ) : (
        <TouchableOpacity
          style={styles.deleteButton}
          onPress={() => deleteFromProcessing(item)}
        >
          <Ionicons name="trash-outline" size={24} color="#F44336" />
        </TouchableOpacity>
      )}

      <TouchableOpacity
        style={styles.wordInfo}
        onPress={activeTab === "toLearn" ? () => moveToProcessing(item) : null}
      >
        <Text style={styles.termText}>{item.term}</Text>
        <Text style={styles.meaningText}>{item.meaning}</Text>
        <Text style={styles.levelBadge}>Level: {item.level.toUpperCase()}</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.tabSelector}>
        <TouchableOpacity
          style={[styles.tab, activeTab === "toLearn" && styles.activeTab]}
          onPress={() => setActiveTab("toLearn")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "toLearn" && styles.activeTabText,
            ]}
          >
            To be Learned ({toLearnWords.length})
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.tab, activeTab === "processing" && styles.activeTab]}
          onPress={() => setActiveTab("processing")}
        >
          <Text
            style={[
              styles.tabText,
              activeTab === "processing" && styles.activeTabText,
            ]}
          >
            Being Processed ({processingWords.length})
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search words..."
          value={searchText}
          onChangeText={setSearchText}
        />
      </View>

      <View style={styles.filterContainer}>
        <Text style={styles.filterLabel}>Filter by level:</Text>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          <TouchableOpacity
            style={[
              styles.filterChip,
              !selectedLevelFilter && styles.activeFilterChip,
            ]}
            onPress={() => setSelectedLevelFilter("")}
          >
            <Text
              style={[
                styles.filterChipText,
                !selectedLevelFilter && styles.activeFilterChipText,
              ]}
            >
              All
            </Text>
          </TouchableOpacity>

          {levels.map((level) => (
            <TouchableOpacity
              key={level}
              style={[
                styles.filterChip,
                selectedLevelFilter === level && styles.activeFilterChip,
              ]}
              onPress={() => setSelectedLevelFilter(level)}
            >
              <Text
                style={[
                  styles.filterChipText,
                  selectedLevelFilter === level && styles.activeFilterChipText,
                ]}
              >
                {level.toUpperCase()}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {loading && !refreshing ? (
        <ActivityIndicator size="large" color="#646cff" />
      ) : (
        <FlatList
          data={filterWords(
            activeTab === "toLearn" ? toLearnWords : processingWords
          )}
          renderItem={renderItem}
          keyExtractor={(item) => item.term}
          ListEmptyComponent={
            <Text style={styles.emptyText}>No words in this category.</Text>
          }
          refreshControl={
            <RefreshControl
              refreshing={refreshing}
              onRefresh={onRefresh}
              colors={["#646cff"]}
            />
          }
        />
      )}
    </SafeAreaView>
  );
}

// Settings Screen Component
function SettingsScreen() {
  const clearAllData = async () => {
    Alert.alert(
      "Clear All Data",
      "Are you sure you want to clear all saved words? This action cannot be undone.",
      [
        {
          text: "Cancel",
          style: "cancel",
        },
        {
          text: "Clear",
          onPress: async () => {
            try {
              await AsyncStorage.removeItem("knownWords");
              await AsyncStorage.removeItem("toLearnWords");
              await AsyncStorage.removeItem("processingWords");
              Alert.alert("Success", "All data has been cleared.");
            } catch (error) {
              console.error("Error clearing data:", error);
              Alert.alert("Error", "Failed to clear data.");
            }
          },
          style: "destructive",
        },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.settingsSection}>
        <Text style={styles.settingsHeader}>App Settings</Text>

        <View style={styles.settingsItem}>
          <Text style={styles.settingsLabel}>Clear All Data</Text>
          <Text style={styles.settingsDescription}>
            Reset all your progress by clearing all saved words.
          </Text>
          <TouchableOpacity style={styles.clearButton} onPress={clearAllData}>
            <Text style={styles.clearButtonText}>Clear All Data</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f5f5f5",
  },
  levelSelector: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 15,
    backgroundColor: "white",
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  arrowButton: {
    padding: 5,
  },
  levelText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
  },
  counter: {
    textAlign: "center",
    margin: 10,
    fontSize: 16,
    color: "#666",
  },
  cardContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  card: {
    width: "90%",
    backgroundColor: "white",
    borderRadius: 10,
    padding: 20,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    alignItems: "center",
  },
  termText: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  meaningText: {
    fontSize: 20,
    color: "#666",
  },
  buttonContainer: {
    flexDirection: "row",
    justifyContent: "space-around",
    padding: 20,
  },
  actionButton: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: "center",
    alignItems: "center",
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
  },
  tickButton: {
    backgroundColor: "#4CAF50",
  },
  crossButton: {
    backgroundColor: "#F44336",
  },
  emptyText: {
    fontSize: 16,
    color: "#888",
    textAlign: "center",
    padding: 20,
  },
  tabSelector: {
    flexDirection: "row",
    backgroundColor: "white",
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  tab: {
    flex: 1,
    padding: 15,
    alignItems: "center",
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: "#646cff",
  },
  tabText: {
    fontSize: 16,
    color: "#666",
  },
  activeTabText: {
    color: "#646cff",
    fontWeight: "bold",
  },
  dictionaryItem: {
    flexDirection: "row",
    backgroundColor: "white",
    padding: 15,
    marginVertical: 5,
    marginHorizontal: 10,
    borderRadius: 5,
    borderLeftWidth: 4,
    borderLeftColor: "#646cff",
    alignItems: "center",
  },
  checkbox: {
    marginRight: 15,
  },
  deleteButton: {
    marginRight: 15,
  },
  wordInfo: {
    flex: 1,
  },
  levelBadge: {
    fontSize: 12,
    color: "#888",
    marginTop: 5,
  },
  searchContainer: {
    padding: 10,
    backgroundColor: "white",
  },
  searchInput: {
    backgroundColor: "#f0f0f0",
    padding: 10,
    borderRadius: 8,
    fontSize: 16,
  },
  filterContainer: {
    padding: 10,
    backgroundColor: "white",
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  filterLabel: {
    fontSize: 14,
    marginBottom: 8,
    color: "#666",
  },
  filterChip: {
    backgroundColor: "#f0f0f0",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 16,
    marginRight: 8,
  },
  activeFilterChip: {
    backgroundColor: "#646cff",
  },
  filterChipText: {
    color: "#666",
    fontSize: 14,
  },
  activeFilterChipText: {
    color: "white",
    fontWeight: "bold",
  },
  settingsSection: {
    backgroundColor: "white",
    margin: 10,
    borderRadius: 10,
    overflow: "hidden",
  },
  settingsHeader: {
    fontSize: 20,
    fontWeight: "bold",
    padding: 15,
    backgroundColor: "#f8f8f8",
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
    color: "#333",
  },
  settingsItem: {
    padding: 15,
  },
  settingsLabel: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  settingsDescription: {
    fontSize: 14,
    color: "#666",
    marginBottom: 15,
  },
  clearButton: {
    backgroundColor: "#F44336",
    padding: 12,
    borderRadius: 8,
    alignItems: "center",
  },
  clearButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
});
